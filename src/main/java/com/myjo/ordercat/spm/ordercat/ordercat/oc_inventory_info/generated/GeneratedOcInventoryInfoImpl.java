package com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.generated;

import com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.OcInventoryInfo;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.OcInventoryInfo}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedOcInventoryInfoImpl implements OcInventoryInfo {
    
    private BigDecimal purchasePrice;
    private long id;
    private String goodsNo;
    private Integer warehouseId;
    private String warehouseName;
    private String size1;
    private String size2;
    private String brand;
    private BigDecimal marketprice;
    private Integer num2;
    private String division;
    private String cate;
    private String sex;
    private String quarter;
    private String discount;
    private Integer pickRate;
    private LocalDateTime warehouseUpdateTime;
    private String pickDate;
    private String thedtime;
    private BigDecimal proxyPrice;
    private BigDecimal salesPrice;
    private Integer salesCount;
    private String expressName;
    private String retrunDesc;
    private Integer returnRate;
    private String endT;
    private String mark;
    private String numIid;
    private LocalDateTime addTime;
    private Integer execJobId;
    
    protected GeneratedOcInventoryInfoImpl() {
        
    }
    
    @Override
    public Optional<BigDecimal> getPurchasePrice() {
        return Optional.ofNullable(purchasePrice);
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public Optional<String> getGoodsNo() {
        return Optional.ofNullable(goodsNo);
    }
    
    @Override
    public OptionalInt getWarehouseId() {
        return OptionalUtil.ofNullable(warehouseId);
    }
    
    @Override
    public Optional<String> getWarehouseName() {
        return Optional.ofNullable(warehouseName);
    }
    
    @Override
    public Optional<String> getSize1() {
        return Optional.ofNullable(size1);
    }
    
    @Override
    public Optional<String> getSize2() {
        return Optional.ofNullable(size2);
    }
    
    @Override
    public Optional<String> getBrand() {
        return Optional.ofNullable(brand);
    }
    
    @Override
    public Optional<BigDecimal> getMarketprice() {
        return Optional.ofNullable(marketprice);
    }
    
    @Override
    public OptionalInt getNum2() {
        return OptionalUtil.ofNullable(num2);
    }
    
    @Override
    public Optional<String> getDivision() {
        return Optional.ofNullable(division);
    }
    
    @Override
    public Optional<String> getCate() {
        return Optional.ofNullable(cate);
    }
    
    @Override
    public Optional<String> getSex() {
        return Optional.ofNullable(sex);
    }
    
    @Override
    public Optional<String> getQuarter() {
        return Optional.ofNullable(quarter);
    }
    
    @Override
    public Optional<String> getDiscount() {
        return Optional.ofNullable(discount);
    }
    
    @Override
    public OptionalInt getPickRate() {
        return OptionalUtil.ofNullable(pickRate);
    }
    
    @Override
    public Optional<LocalDateTime> getWarehouseUpdateTime() {
        return Optional.ofNullable(warehouseUpdateTime);
    }
    
    @Override
    public Optional<String> getPickDate() {
        return Optional.ofNullable(pickDate);
    }
    
    @Override
    public Optional<String> getThedtime() {
        return Optional.ofNullable(thedtime);
    }
    
    @Override
    public Optional<BigDecimal> getProxyPrice() {
        return Optional.ofNullable(proxyPrice);
    }
    
    @Override
    public Optional<BigDecimal> getSalesPrice() {
        return Optional.ofNullable(salesPrice);
    }
    
    @Override
    public OptionalInt getSalesCount() {
        return OptionalUtil.ofNullable(salesCount);
    }
    
    @Override
    public Optional<String> getExpressName() {
        return Optional.ofNullable(expressName);
    }
    
    @Override
    public Optional<String> getRetrunDesc() {
        return Optional.ofNullable(retrunDesc);
    }
    
    @Override
    public OptionalInt getReturnRate() {
        return OptionalUtil.ofNullable(returnRate);
    }
    
    @Override
    public Optional<String> getEndT() {
        return Optional.ofNullable(endT);
    }
    
    @Override
    public Optional<String> getMark() {
        return Optional.ofNullable(mark);
    }
    
    @Override
    public Optional<String> getNumIid() {
        return Optional.ofNullable(numIid);
    }
    
    @Override
    public LocalDateTime getAddTime() {
        return addTime;
    }
    
    @Override
    public OptionalInt getExecJobId() {
        return OptionalUtil.ofNullable(execJobId);
    }
    
    @Override
    public OcInventoryInfo setPurchasePrice(BigDecimal purchasePrice) {
        this.purchasePrice = purchasePrice;
        return this;
    }
    
    @Override
    public OcInventoryInfo setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public OcInventoryInfo setGoodsNo(String goodsNo) {
        this.goodsNo = goodsNo;
        return this;
    }
    
    @Override
    public OcInventoryInfo setWarehouseId(Integer warehouseId) {
        this.warehouseId = warehouseId;
        return this;
    }
    
    @Override
    public OcInventoryInfo setWarehouseName(String warehouseName) {
        this.warehouseName = warehouseName;
        return this;
    }
    
    @Override
    public OcInventoryInfo setSize1(String size1) {
        this.size1 = size1;
        return this;
    }
    
    @Override
    public OcInventoryInfo setSize2(String size2) {
        this.size2 = size2;
        return this;
    }
    
    @Override
    public OcInventoryInfo setBrand(String brand) {
        this.brand = brand;
        return this;
    }
    
    @Override
    public OcInventoryInfo setMarketprice(BigDecimal marketprice) {
        this.marketprice = marketprice;
        return this;
    }
    
    @Override
    public OcInventoryInfo setNum2(Integer num2) {
        this.num2 = num2;
        return this;
    }
    
    @Override
    public OcInventoryInfo setDivision(String division) {
        this.division = division;
        return this;
    }
    
    @Override
    public OcInventoryInfo setCate(String cate) {
        this.cate = cate;
        return this;
    }
    
    @Override
    public OcInventoryInfo setSex(String sex) {
        this.sex = sex;
        return this;
    }
    
    @Override
    public OcInventoryInfo setQuarter(String quarter) {
        this.quarter = quarter;
        return this;
    }
    
    @Override
    public OcInventoryInfo setDiscount(String discount) {
        this.discount = discount;
        return this;
    }
    
    @Override
    public OcInventoryInfo setPickRate(Integer pickRate) {
        this.pickRate = pickRate;
        return this;
    }
    
    @Override
    public OcInventoryInfo setWarehouseUpdateTime(LocalDateTime warehouseUpdateTime) {
        this.warehouseUpdateTime = warehouseUpdateTime;
        return this;
    }
    
    @Override
    public OcInventoryInfo setPickDate(String pickDate) {
        this.pickDate = pickDate;
        return this;
    }
    
    @Override
    public OcInventoryInfo setThedtime(String thedtime) {
        this.thedtime = thedtime;
        return this;
    }
    
    @Override
    public OcInventoryInfo setProxyPrice(BigDecimal proxyPrice) {
        this.proxyPrice = proxyPrice;
        return this;
    }
    
    @Override
    public OcInventoryInfo setSalesPrice(BigDecimal salesPrice) {
        this.salesPrice = salesPrice;
        return this;
    }
    
    @Override
    public OcInventoryInfo setSalesCount(Integer salesCount) {
        this.salesCount = salesCount;
        return this;
    }
    
    @Override
    public OcInventoryInfo setExpressName(String expressName) {
        this.expressName = expressName;
        return this;
    }
    
    @Override
    public OcInventoryInfo setRetrunDesc(String retrunDesc) {
        this.retrunDesc = retrunDesc;
        return this;
    }
    
    @Override
    public OcInventoryInfo setReturnRate(Integer returnRate) {
        this.returnRate = returnRate;
        return this;
    }
    
    @Override
    public OcInventoryInfo setEndT(String endT) {
        this.endT = endT;
        return this;
    }
    
    @Override
    public OcInventoryInfo setMark(String mark) {
        this.mark = mark;
        return this;
    }
    
    @Override
    public OcInventoryInfo setNumIid(String numIid) {
        this.numIid = numIid;
        return this;
    }
    
    @Override
    public OcInventoryInfo setAddTime(LocalDateTime addTime) {
        this.addTime = addTime;
        return this;
    }
    
    @Override
    public OcInventoryInfo setExecJobId(Integer execJobId) {
        this.execJobId = execJobId;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("purchasePrice = "       + Objects.toString(OptionalUtil.unwrap(getPurchasePrice())));
        sj.add("id = "                  + Objects.toString(getId()));
        sj.add("goodsNo = "             + Objects.toString(OptionalUtil.unwrap(getGoodsNo())));
        sj.add("warehouseId = "         + Objects.toString(OptionalUtil.unwrap(getWarehouseId())));
        sj.add("warehouseName = "       + Objects.toString(OptionalUtil.unwrap(getWarehouseName())));
        sj.add("size1 = "               + Objects.toString(OptionalUtil.unwrap(getSize1())));
        sj.add("size2 = "               + Objects.toString(OptionalUtil.unwrap(getSize2())));
        sj.add("brand = "               + Objects.toString(OptionalUtil.unwrap(getBrand())));
        sj.add("marketprice = "         + Objects.toString(OptionalUtil.unwrap(getMarketprice())));
        sj.add("num2 = "                + Objects.toString(OptionalUtil.unwrap(getNum2())));
        sj.add("division = "            + Objects.toString(OptionalUtil.unwrap(getDivision())));
        sj.add("cate = "                + Objects.toString(OptionalUtil.unwrap(getCate())));
        sj.add("sex = "                 + Objects.toString(OptionalUtil.unwrap(getSex())));
        sj.add("quarter = "             + Objects.toString(OptionalUtil.unwrap(getQuarter())));
        sj.add("discount = "            + Objects.toString(OptionalUtil.unwrap(getDiscount())));
        sj.add("pickRate = "            + Objects.toString(OptionalUtil.unwrap(getPickRate())));
        sj.add("warehouseUpdateTime = " + Objects.toString(OptionalUtil.unwrap(getWarehouseUpdateTime())));
        sj.add("pickDate = "            + Objects.toString(OptionalUtil.unwrap(getPickDate())));
        sj.add("thedtime = "            + Objects.toString(OptionalUtil.unwrap(getThedtime())));
        sj.add("proxyPrice = "          + Objects.toString(OptionalUtil.unwrap(getProxyPrice())));
        sj.add("salesPrice = "          + Objects.toString(OptionalUtil.unwrap(getSalesPrice())));
        sj.add("salesCount = "          + Objects.toString(OptionalUtil.unwrap(getSalesCount())));
        sj.add("expressName = "         + Objects.toString(OptionalUtil.unwrap(getExpressName())));
        sj.add("retrunDesc = "          + Objects.toString(OptionalUtil.unwrap(getRetrunDesc())));
        sj.add("returnRate = "          + Objects.toString(OptionalUtil.unwrap(getReturnRate())));
        sj.add("endT = "                + Objects.toString(OptionalUtil.unwrap(getEndT())));
        sj.add("mark = "                + Objects.toString(OptionalUtil.unwrap(getMark())));
        sj.add("numIid = "              + Objects.toString(OptionalUtil.unwrap(getNumIid())));
        sj.add("addTime = "             + Objects.toString(getAddTime()));
        sj.add("execJobId = "           + Objects.toString(OptionalUtil.unwrap(getExecJobId())));
        return "OcInventoryInfoImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof OcInventoryInfo)) { return false; }
        final OcInventoryInfo thatOcInventoryInfo = (OcInventoryInfo)that;
        if (!Objects.equals(this.getPurchasePrice(), thatOcInventoryInfo.getPurchasePrice())) {return false; }
        if (this.getId() != thatOcInventoryInfo.getId()) {return false; }
        if (!Objects.equals(this.getGoodsNo(), thatOcInventoryInfo.getGoodsNo())) {return false; }
        if (!Objects.equals(this.getWarehouseId(), thatOcInventoryInfo.getWarehouseId())) {return false; }
        if (!Objects.equals(this.getWarehouseName(), thatOcInventoryInfo.getWarehouseName())) {return false; }
        if (!Objects.equals(this.getSize1(), thatOcInventoryInfo.getSize1())) {return false; }
        if (!Objects.equals(this.getSize2(), thatOcInventoryInfo.getSize2())) {return false; }
        if (!Objects.equals(this.getBrand(), thatOcInventoryInfo.getBrand())) {return false; }
        if (!Objects.equals(this.getMarketprice(), thatOcInventoryInfo.getMarketprice())) {return false; }
        if (!Objects.equals(this.getNum2(), thatOcInventoryInfo.getNum2())) {return false; }
        if (!Objects.equals(this.getDivision(), thatOcInventoryInfo.getDivision())) {return false; }
        if (!Objects.equals(this.getCate(), thatOcInventoryInfo.getCate())) {return false; }
        if (!Objects.equals(this.getSex(), thatOcInventoryInfo.getSex())) {return false; }
        if (!Objects.equals(this.getQuarter(), thatOcInventoryInfo.getQuarter())) {return false; }
        if (!Objects.equals(this.getDiscount(), thatOcInventoryInfo.getDiscount())) {return false; }
        if (!Objects.equals(this.getPickRate(), thatOcInventoryInfo.getPickRate())) {return false; }
        if (!Objects.equals(this.getWarehouseUpdateTime(), thatOcInventoryInfo.getWarehouseUpdateTime())) {return false; }
        if (!Objects.equals(this.getPickDate(), thatOcInventoryInfo.getPickDate())) {return false; }
        if (!Objects.equals(this.getThedtime(), thatOcInventoryInfo.getThedtime())) {return false; }
        if (!Objects.equals(this.getProxyPrice(), thatOcInventoryInfo.getProxyPrice())) {return false; }
        if (!Objects.equals(this.getSalesPrice(), thatOcInventoryInfo.getSalesPrice())) {return false; }
        if (!Objects.equals(this.getSalesCount(), thatOcInventoryInfo.getSalesCount())) {return false; }
        if (!Objects.equals(this.getExpressName(), thatOcInventoryInfo.getExpressName())) {return false; }
        if (!Objects.equals(this.getRetrunDesc(), thatOcInventoryInfo.getRetrunDesc())) {return false; }
        if (!Objects.equals(this.getReturnRate(), thatOcInventoryInfo.getReturnRate())) {return false; }
        if (!Objects.equals(this.getEndT(), thatOcInventoryInfo.getEndT())) {return false; }
        if (!Objects.equals(this.getMark(), thatOcInventoryInfo.getMark())) {return false; }
        if (!Objects.equals(this.getNumIid(), thatOcInventoryInfo.getNumIid())) {return false; }
        if (!Objects.equals(this.getAddTime(), thatOcInventoryInfo.getAddTime())) {return false; }
        if (!Objects.equals(this.getExecJobId(), thatOcInventoryInfo.getExecJobId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getPurchasePrice());
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getGoodsNo());
        hash = 31 * hash + Objects.hashCode(getWarehouseId());
        hash = 31 * hash + Objects.hashCode(getWarehouseName());
        hash = 31 * hash + Objects.hashCode(getSize1());
        hash = 31 * hash + Objects.hashCode(getSize2());
        hash = 31 * hash + Objects.hashCode(getBrand());
        hash = 31 * hash + Objects.hashCode(getMarketprice());
        hash = 31 * hash + Objects.hashCode(getNum2());
        hash = 31 * hash + Objects.hashCode(getDivision());
        hash = 31 * hash + Objects.hashCode(getCate());
        hash = 31 * hash + Objects.hashCode(getSex());
        hash = 31 * hash + Objects.hashCode(getQuarter());
        hash = 31 * hash + Objects.hashCode(getDiscount());
        hash = 31 * hash + Objects.hashCode(getPickRate());
        hash = 31 * hash + Objects.hashCode(getWarehouseUpdateTime());
        hash = 31 * hash + Objects.hashCode(getPickDate());
        hash = 31 * hash + Objects.hashCode(getThedtime());
        hash = 31 * hash + Objects.hashCode(getProxyPrice());
        hash = 31 * hash + Objects.hashCode(getSalesPrice());
        hash = 31 * hash + Objects.hashCode(getSalesCount());
        hash = 31 * hash + Objects.hashCode(getExpressName());
        hash = 31 * hash + Objects.hashCode(getRetrunDesc());
        hash = 31 * hash + Objects.hashCode(getReturnRate());
        hash = 31 * hash + Objects.hashCode(getEndT());
        hash = 31 * hash + Objects.hashCode(getMark());
        hash = 31 * hash + Objects.hashCode(getNumIid());
        hash = 31 * hash + Objects.hashCode(getAddTime());
        hash = 31 * hash + Objects.hashCode(getExecJobId());
        return hash;
    }
}