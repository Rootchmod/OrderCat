package com.myjo.ordercat.spm.ordercat.ordercat.oc_warehouse_info.generated;

import com.myjo.ordercat.spm.ordercat.ordercat.oc_warehouse_info.OcWarehouseInfo;
import com.myjo.ordercat.spm.ordercat.ordercat.oc_warehouse_info.OcWarehouseInfoImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.myjo.ordercat.spm.ordercat.ordercat.oc_warehouse_info.OcWarehouseInfo}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedOcWarehouseInfoSqlAdapter {
    
    private final TableIdentifier<OcWarehouseInfo> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> udpateWarehouseTimeHelper;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> addTimeHelper;
    
    protected GeneratedOcWarehouseInfoSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("ordercat", "ordercat", "oc_warehouse_info");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected OcWarehouseInfo apply(ResultSet resultSet) throws SpeedmentException {
        final OcWarehouseInfo entity = createEntity();
        try {
            entity.setId(                  resultSet.getLong(1)                                       );
            entity.setWarehouseId(         getInt(resultSet, 2)                                       );
            entity.setWarehouseName(       resultSet.getString(3)                                     );
            entity.setPickRate(            getInt(resultSet, 4)                                       );
            entity.setThedTime(            getInt(resultSet, 5)                                       );
            entity.setExecJobId(           getInt(resultSet, 6)                                       );
            entity.setPickDate(            getInt(resultSet, 7)                                       );
            entity.setUdpateWarehouseTime( udpateWarehouseTimeHelper.apply(resultSet.getTimestamp(8)) );
            entity.setMark(                resultSet.getString(9)                                     );
            entity.setRetrunDesc(          resultSet.getString(10)                                    );
            entity.setReturnRate(          getInt(resultSet, 11)                                      );
            entity.setExpressName(         resultSet.getString(12)                                    );
            entity.setEndT(                resultSet.getString(13)                                    );
            entity.setAddTime(             addTimeHelper.apply(resultSet.getTimestamp(14))            );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected OcWarehouseInfoImpl createEntity() {
        return new OcWarehouseInfoImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        udpateWarehouseTimeHelper = SqlTypeMapperHelper.create(project, OcWarehouseInfo.UDPATE_WAREHOUSE_TIME, OcWarehouseInfo.class);
        addTimeHelper = SqlTypeMapperHelper.create(project, OcWarehouseInfo.ADD_TIME, OcWarehouseInfo.class);
    }
}