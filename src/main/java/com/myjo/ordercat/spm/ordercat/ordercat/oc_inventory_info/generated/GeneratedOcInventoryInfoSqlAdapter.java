package com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.generated;

import com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.OcInventoryInfo;
import com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.OcInventoryInfoImpl;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.myjo.ordercat.spm.ordercat.ordercat.oc_inventory_info.OcInventoryInfo}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedOcInventoryInfoSqlAdapter {
    
    private final TableIdentifier<OcInventoryInfo> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> warehouseUpdateTimeHelper;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> addTimeHelper;
    
    protected GeneratedOcInventoryInfoSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("ordercat", "ordercat", "oc_inventory_info");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent, @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected OcInventoryInfo apply(ResultSet resultSet) throws SpeedmentException {
        final OcInventoryInfo entity = createEntity();
        try {
            entity.setPurchasePrice(       resultSet.getBigDecimal(1)                                  );
            entity.setId(                  resultSet.getLong(2)                                        );
            entity.setGoodsNo(             resultSet.getString(3)                                      );
            entity.setWarehouseId(         getInt(resultSet, 4)                                        );
            entity.setWarehouseName(       resultSet.getString(5)                                      );
            entity.setSize1(               resultSet.getString(6)                                      );
            entity.setSize2(               resultSet.getString(7)                                      );
            entity.setBrand(               resultSet.getString(8)                                      );
            entity.setMarketprice(         resultSet.getBigDecimal(9)                                  );
            entity.setNum2(                getInt(resultSet, 10)                                       );
            entity.setDivision(            resultSet.getString(11)                                     );
            entity.setCate(                resultSet.getString(12)                                     );
            entity.setSex(                 resultSet.getString(13)                                     );
            entity.setQuarter(             resultSet.getString(14)                                     );
            entity.setDiscount(            resultSet.getString(15)                                     );
            entity.setPickRate(            getInt(resultSet, 16)                                       );
            entity.setWarehouseUpdateTime( warehouseUpdateTimeHelper.apply(resultSet.getTimestamp(17)) );
            entity.setPickDate(            resultSet.getString(18)                                     );
            entity.setThedtime(            resultSet.getString(19)                                     );
            entity.setProxyPrice(          resultSet.getBigDecimal(20)                                 );
            entity.setSalesPrice(          resultSet.getBigDecimal(21)                                 );
            entity.setSalesCount(          getInt(resultSet, 22)                                       );
            entity.setExpressName(         resultSet.getString(23)                                     );
            entity.setRetrunDesc(          resultSet.getString(24)                                     );
            entity.setReturnRate(          getInt(resultSet, 25)                                       );
            entity.setEndT(                resultSet.getString(26)                                     );
            entity.setMark(                resultSet.getString(27)                                     );
            entity.setNumIid(              resultSet.getString(28)                                     );
            entity.setAddTime(             addTimeHelper.apply(resultSet.getTimestamp(29))             );
            entity.setExecJobId(           getInt(resultSet, 30)                                       );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected OcInventoryInfoImpl createEntity() {
        return new OcInventoryInfoImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        warehouseUpdateTimeHelper = SqlTypeMapperHelper.create(project, OcInventoryInfo.WAREHOUSE_UPDATE_TIME, OcInventoryInfo.class);
        addTimeHelper = SqlTypeMapperHelper.create(project, OcInventoryInfo.ADD_TIME, OcInventoryInfo.class);
    }
}