package com.myjo.ordercat.spm.ordercat.ordercat.oc_tianma_check_result.generated;

import com.myjo.ordercat.spm.ordercat.ordercat.oc_tianma_check_result.OcTianmaCheckResult;
import com.myjo.ordercat.spm.ordercat.ordercat.oc_tianma_check_result.OcTianmaCheckResultImpl;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.myjo.ordercat.spm.ordercat.ordercat.oc_tianma_check_result.OcTianmaCheckResult}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedOcTianmaCheckResultSqlAdapter {
    
    private final TableIdentifier<OcTianmaCheckResult> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> addTimeHelper;
    
    protected GeneratedOcTianmaCheckResultSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("ordercat", "ordercat", "oc_tianma_check_result");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent, @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected OcTianmaCheckResult apply(ResultSet resultSet) throws SpeedmentException {
        final OcTianmaCheckResult entity = createEntity();
        try {
            entity.setId(                 resultSet.getLong(1)                            );
            entity.setTbOrderId(          getLong(resultSet, 2)                           );
            entity.setTbOrderStatus(      resultSet.getString(3)                          );
            entity.setTbNumIid(           getLong(resultSet, 4)                           );
            entity.setTbTitle(            resultSet.getString(5)                          );
            entity.setTbPayment(          resultSet.getBigDecimal(6)                      );
            entity.setTbRefundId(         getLong(resultSet, 7)                           );
            entity.setTbRefundStatus(     resultSet.getString(8)                          );
            entity.setTbNum(              getLong(resultSet, 9)                           );
            entity.setTmOrderId(          getLong(resultSet, 10)                          );
            entity.setTmOuterOrderId(     resultSet.getString(11)                         );
            entity.setTmGoodsNo(          resultSet.getString(12)                         );
            entity.setTmOrderStatus(      resultSet.getString(13)                         );
            entity.setTmDeliveryNo(       resultSet.getString(14)                         );
            entity.setTmDeliveryName(     resultSet.getString(15)                         );
            entity.setTmWarehouseId(      getInt(resultSet, 16)                           );
            entity.setTmBuyerName(        resultSet.getString(17)                         );
            entity.setTmWarehouseName(    resultSet.getString(18)                         );
            entity.setTmPayPrice(         resultSet.getBigDecimal(19)                     );
            entity.setTmPostFee(          resultSet.getBigDecimal(20)                     );
            entity.setTmNoshipmentRemark( resultSet.getString(21)                         );
            entity.setSize1(              resultSet.getString(22)                         );
            entity.setSize2(              resultSet.getString(23)                         );
            entity.setDzStatus(           resultSet.getString(24)                         );
            entity.setDzDetailsMessage(   resultSet.getString(25)                         );
            entity.setRemarks(            resultSet.getString(26)                         );
            entity.setAddTime(            addTimeHelper.apply(resultSet.getTimestamp(27)) );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected OcTianmaCheckResultImpl createEntity() {
        return new OcTianmaCheckResultImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        addTimeHelper = SqlTypeMapperHelper.create(project, OcTianmaCheckResult.ADD_TIME, OcTianmaCheckResult.class);
    }
}