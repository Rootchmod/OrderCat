package com.myjo.ordercat.spm.ordercat.ordercat.oc_tmsport_check_result.generated;

import com.myjo.ordercat.spm.ordercat.ordercat.oc_tmsport_check_result.OcTmsportCheckResult;
import com.myjo.ordercat.spm.ordercat.ordercat.oc_tmsport_check_result.OcTmsportCheckResultImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.myjo.ordercat.spm.ordercat.ordercat.oc_tmsport_check_result.OcTmsportCheckResult}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedOcTmsportCheckResultSqlAdapter {
    
    private final TableIdentifier<OcTmsportCheckResult> tableIdentifier;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> tbCreatedHelper;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> tbPaytimeHelper;
    private SqlTypeMapperHelper<Timestamp, LocalDateTime> addTimeHelper;
    
    protected GeneratedOcTmsportCheckResultSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("ordercat", "ordercat", "oc_tmsport_check_result");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected OcTmsportCheckResult apply(ResultSet resultSet) throws SpeedmentException {
        final OcTmsportCheckResult entity = createEntity();
        try {
            entity.setId(               resultSet.getLong(1)                              );
            entity.setTmOrderIds(       resultSet.getString(2)                            );
            entity.setTmOuterOrderId(   resultSet.getString(3)                            );
            entity.setTmOrderNum(       getLong(resultSet, 4)                             );
            entity.setTmNum(            getLong(resultSet, 5)                             );
            entity.setTbTitle(          resultSet.getString(6)                            );
            entity.setTbNickname(       resultSet.getString(7)                            );
            entity.setTbOrderNum(       getLong(resultSet, 8)                             );
            entity.setTbNum(            getLong(resultSet, 9)                             );
            entity.setTbCreated(        tbCreatedHelper.apply(resultSet.getTimestamp(10)) );
            entity.setTbPaytime(        tbPaytimeHelper.apply(resultSet.getTimestamp(11)) );
            entity.setTbPrice(          resultSet.getBigDecimal(12)                       );
            entity.setTbPayment(        resultSet.getBigDecimal(13)                       );
            entity.setTbDiscountFee(    resultSet.getBigDecimal(14)                       );
            entity.setTbTotalFee(       resultSet.getBigDecimal(15)                       );
            entity.setDzStatus(         resultSet.getString(16)                           );
            entity.setDzDetailsMessage( resultSet.getString(17)                           );
            entity.setLabourStatus(     resultSet.getString(18)                           );
            entity.setRemarks(          resultSet.getString(19)                           );
            entity.setAddTime(          addTimeHelper.apply(resultSet.getTimestamp(20))   );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected OcTmsportCheckResultImpl createEntity() {
        return new OcTmsportCheckResultImpl();
    }
    
    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        tbCreatedHelper = SqlTypeMapperHelper.create(project, OcTmsportCheckResult.TB_CREATED, OcTmsportCheckResult.class);
        tbPaytimeHelper = SqlTypeMapperHelper.create(project, OcTmsportCheckResult.TB_PAYTIME, OcTmsportCheckResult.class);
        addTimeHelper = SqlTypeMapperHelper.create(project, OcTmsportCheckResult.ADD_TIME, OcTmsportCheckResult.class);
    }
}