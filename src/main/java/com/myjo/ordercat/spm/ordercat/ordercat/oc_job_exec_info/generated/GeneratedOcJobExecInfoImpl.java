package com.myjo.ordercat.spm.ordercat.ordercat.oc_job_exec_info.generated;

import com.myjo.ordercat.spm.ordercat.ordercat.oc_job_exec_info.OcJobExecInfo;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalLong;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.myjo.ordercat.spm.ordercat.ordercat.oc_job_exec_info.OcJobExecInfo}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedOcJobExecInfoImpl implements OcJobExecInfo {
    
    private long id;
    private String jobName;
    private LocalDateTime beginTime;
    private LocalDateTime endTime;
    private Long elapsed;
    private String status;
    private String errorMessage;
    
    protected GeneratedOcJobExecInfoImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public Optional<String> getJobName() {
        return Optional.ofNullable(jobName);
    }
    
    @Override
    public LocalDateTime getBeginTime() {
        return beginTime;
    }
    
    @Override
    public Optional<LocalDateTime> getEndTime() {
        return Optional.ofNullable(endTime);
    }
    
    @Override
    public OptionalLong getElapsed() {
        return OptionalUtil.ofNullable(elapsed);
    }
    
    @Override
    public String getStatus() {
        return status;
    }
    
    @Override
    public Optional<String> getErrorMessage() {
        return Optional.ofNullable(errorMessage);
    }
    
    @Override
    public OcJobExecInfo setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public OcJobExecInfo setJobName(String jobName) {
        this.jobName = jobName;
        return this;
    }
    
    @Override
    public OcJobExecInfo setBeginTime(LocalDateTime beginTime) {
        this.beginTime = beginTime;
        return this;
    }
    
    @Override
    public OcJobExecInfo setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    @Override
    public OcJobExecInfo setElapsed(Long elapsed) {
        this.elapsed = elapsed;
        return this;
    }
    
    @Override
    public OcJobExecInfo setStatus(String status) {
        this.status = status;
        return this;
    }
    
    @Override
    public OcJobExecInfo setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "           + Objects.toString(getId()));
        sj.add("jobName = "      + Objects.toString(OptionalUtil.unwrap(getJobName())));
        sj.add("beginTime = "    + Objects.toString(getBeginTime()));
        sj.add("endTime = "      + Objects.toString(OptionalUtil.unwrap(getEndTime())));
        sj.add("elapsed = "      + Objects.toString(OptionalUtil.unwrap(getElapsed())));
        sj.add("status = "       + Objects.toString(getStatus()));
        sj.add("errorMessage = " + Objects.toString(OptionalUtil.unwrap(getErrorMessage())));
        return "OcJobExecInfoImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof OcJobExecInfo)) { return false; }
        final OcJobExecInfo thatOcJobExecInfo = (OcJobExecInfo)that;
        if (this.getId() != thatOcJobExecInfo.getId()) {return false; }
        if (!Objects.equals(this.getJobName(), thatOcJobExecInfo.getJobName())) {return false; }
        if (!Objects.equals(this.getBeginTime(), thatOcJobExecInfo.getBeginTime())) {return false; }
        if (!Objects.equals(this.getEndTime(), thatOcJobExecInfo.getEndTime())) {return false; }
        if (!Objects.equals(this.getElapsed(), thatOcJobExecInfo.getElapsed())) {return false; }
        if (!Objects.equals(this.getStatus(), thatOcJobExecInfo.getStatus())) {return false; }
        if (!Objects.equals(this.getErrorMessage(), thatOcJobExecInfo.getErrorMessage())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getJobName());
        hash = 31 * hash + Objects.hashCode(getBeginTime());
        hash = 31 * hash + Objects.hashCode(getEndTime());
        hash = 31 * hash + Objects.hashCode(getElapsed());
        hash = 31 * hash + Objects.hashCode(getStatus());
        hash = 31 * hash + Objects.hashCode(getErrorMessage());
        return hash;
    }
}